// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240313153330_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.App.Role.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("AddressID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PatronymicName")
                        .HasColumnType("text");

                    b.Property<string>("RoomID")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("StudentGroupID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("RoomID");

                    b.HasIndex("StudentGroupID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("Contactid")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("Contactid");

                    b.ToTable("Dormitories");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Floor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int?>("BuildingID")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Room", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("FloorID")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FloorID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.Entities.Model.StudentAccomodation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Contract")
                        .HasColumnType("text");

                    b.Property<int?>("DormitoryID")
                        .HasColumnType("integer");

                    b.Property<string>("RoomID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("DormitoryID");

                    b.HasIndex("RoomID");

                    b.ToTable("StudentAccomodations");
                });

            modelBuilder.Entity("Domain.Entities.SideInformation.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entities.SideInformation.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Domain.Entities.SideInformation.StudentGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.HasKey("ID");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("Domain.Entities.App.Role.Student", b =>
                {
                    b.HasOne("Domain.Entities.SideInformation.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("Domain.Entities.Campus.Room", null)
                        .WithMany("students")
                        .HasForeignKey("RoomID");

                    b.HasOne("Domain.Entities.SideInformation.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Building", b =>
                {
                    b.HasOne("Domain.Entities.SideInformation.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SideInformation.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("Contactid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Floor", b =>
                {
                    b.HasOne("Domain.Entities.Campus.Building", null)
                        .WithMany("Floors")
                        .HasForeignKey("BuildingID");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Room", b =>
                {
                    b.HasOne("Domain.Entities.Campus.Floor", null)
                        .WithMany("Rooms")
                        .HasForeignKey("FloorID");
                });

            modelBuilder.Entity("Domain.Entities.Model.StudentAccomodation", b =>
                {
                    b.HasOne("Domain.Entities.Campus.Building", "Dormitory")
                        .WithMany()
                        .HasForeignKey("DormitoryID");

                    b.HasOne("Domain.Entities.Campus.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.Navigation("Dormitory");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Building", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Entities.Campus.Room", b =>
                {
                    b.Navigation("students");
                });
#pragma warning restore 612, 618
        }
    }
}
